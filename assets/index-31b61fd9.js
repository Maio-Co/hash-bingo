import{c as a,a as x,b as G,s as b,d as z,e as w,f as K,g as D,h as F,i as M,j as _,k as L,l as P,m as q,n as $,G as B,o as V,p as H,q as j,r as N,t as J,S as I,A as T}from"./AssumeRoleCommand-6fbe4e5d.js";import{y as ge,C as Ie,E as he,w as Te,I as Re,x as We,v as pe,M as ve,P as ke,R as Ee,u as xe}from"./AssumeRoleCommand-6fbe4e5d.js";import"./lazy-json-bd073f8f.js";import{c as Q}from"./create-aggregated-client-5440cf77.js";import{C as l,g as d,a as c}from"./index-9515a35f.js";import{b as be}from"./index-9515a35f.js";import"./noAuth-3a9ec9c8.js";import"./constants-c1d53137.js";import"./index-d9a9a9ca.js";class U extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithSAML",{}).n("STSClient","AssumeRoleWithSAMLCommand").f(x,G).ser(b).de(z).build(){}class R extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(w,K).ser(D).de(F).build(){}class X extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","DecodeAuthorizationMessage",{}).n("STSClient","DecodeAuthorizationMessageCommand").f(void 0,void 0).ser(M).de(_).build(){}class Y extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetAccessKeyInfo",{}).n("STSClient","GetAccessKeyInfoCommand").f(void 0,void 0).ser(L).de(P).build(){}class Z extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetCallerIdentity",{}).n("STSClient","GetCallerIdentityCommand").f(void 0,void 0).ser(q).de($).build(){}class O extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetFederationToken",{}).n("STSClient","GetFederationTokenCommand").f(void 0,B).ser(V).de(H).build(){}class ee extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetSessionToken",{}).n("STSClient","GetSessionTokenCommand").f(void 0,j).ser(N).de(J).build(){}const te={AssumeRoleCommand:T,AssumeRoleWithSAMLCommand:U,AssumeRoleWithWebIdentityCommand:R,DecodeAuthorizationMessageCommand:X,GetAccessKeyInfoCommand:Y,GetCallerIdentityCommand:Z,GetFederationTokenCommand:O,GetSessionTokenCommand:ee};class ne extends I{}Q(te,ne);const h="us-east-1",W=e=>{if(typeof(e==null?void 0:e.Arn)=="string"){const t=e.Arn.split(":");if(t.length>4&&t[4]!=="")return t[4]}},p=async(e,t,i)=>{var r;const n=typeof e=="function"?await e():e,s=typeof t=="function"?await t():t;return(r=i==null?void 0:i.debug)==null||r.call(i,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${n} (provider)`,`${s} (parent client)`,`${h} (STS default)`),n??s??h},se=(e,t)=>{let i,n;return async(s,r)=>{var u,C,A;if(n=s,!i){const{logger:f=(u=e==null?void 0:e.parentClientConfig)==null?void 0:u.logger,region:y,requestHandler:g=(C=e==null?void 0:e.parentClientConfig)==null?void 0:C.requestHandler,credentialProviderLogger:k}=e,E=await p(y,(A=e==null?void 0:e.parentClientConfig)==null?void 0:A.region,k);i=new t({credentialDefaultProvider:()=>async()=>n,region:E,requestHandler:g,logger:f})}const{Credentials:o,AssumedRoleUser:S}=await i.send(new T(r));if(!o||!o.AccessKeyId||!o.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRole call with role ${r.RoleArn}`);const m=W(S);return{accessKeyId:o.AccessKeyId,secretAccessKey:o.SecretAccessKey,sessionToken:o.SessionToken,expiration:o.Expiration,...o.CredentialScope&&{credentialScope:o.CredentialScope},...m&&{accountId:m}}}},ie=(e,t)=>{let i;return async n=>{var S,m,u;if(!i){const{logger:C=(S=e==null?void 0:e.parentClientConfig)==null?void 0:S.logger,region:A,requestHandler:f=(m=e==null?void 0:e.parentClientConfig)==null?void 0:m.requestHandler,credentialProviderLogger:y}=e,g=await p(A,(u=e==null?void 0:e.parentClientConfig)==null?void 0:u.region,y);i=new t({region:g,requestHandler:f,logger:C})}const{Credentials:s,AssumedRoleUser:r}=await i.send(new R(n));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${n.RoleArn}`);const o=W(r);return{accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration,...s.CredentialScope&&{credentialScope:s.CredentialScope},...o&&{accountId:o}}}},v=(e,t)=>t?class extends e{constructor(n){super(n);for(const s of t)this.middlewareStack.use(s)}}:e,oe=(e={},t)=>se(e,v(I,t)),re=(e={},t)=>ie(e,v(I,t)),Ae=e=>t=>e({roleAssumer:oe(t),roleAssumerWithWebIdentity:re(t),...t});export{l as $Command,T as AssumeRoleCommand,ge as AssumeRoleResponseFilterSensitiveLog,U as AssumeRoleWithSAMLCommand,x as AssumeRoleWithSAMLRequestFilterSensitiveLog,G as AssumeRoleWithSAMLResponseFilterSensitiveLog,R as AssumeRoleWithWebIdentityCommand,w as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,K as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,Ie as CredentialsFilterSensitiveLog,X as DecodeAuthorizationMessageCommand,he as ExpiredTokenException,Y as GetAccessKeyInfoCommand,Z as GetCallerIdentityCommand,O as GetFederationTokenCommand,B as GetFederationTokenResponseFilterSensitiveLog,ee as GetSessionTokenCommand,j as GetSessionTokenResponseFilterSensitiveLog,Te as IDPCommunicationErrorException,Re as IDPRejectedClaimException,We as InvalidAuthorizationMessageException,pe as InvalidIdentityTokenException,ve as MalformedPolicyDocumentException,ke as PackedPolicyTooLargeException,Ee as RegionDisabledException,ne as STS,I as STSClient,xe as STSServiceException,be as __Client,Ae as decorateDefaultCredentialProvider,oe as getDefaultRoleAssumer,re as getDefaultRoleAssumerWithWebIdentity};
